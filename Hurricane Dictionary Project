# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}
def update_damages(damage_list):
  updated_damages = []
  for item in damage_list:
    if item == 'Damages not recorded':
      updated_damages.append(item)
    elif "M" in item:
      newitem = float(item.replace("M", "")) * conversion.get("M")
      updated_damages.append(newitem)
    elif "B" in item:
      newitem = float(item.replace("B", "")) * conversion.get("B")
      updated_damages.append(newitem)
  return updated_damages
  print(updated_damages)
updated_damages = update_damages(damages)




#2
#Create a dictionary with the names of hurricanes as keys and all other lists provided as values.
def hurricane_dict_name(key, value1, value2, value3, value4, value5, value6, value7):
  values_list = (zip(value1, value2, value3, value4, value5, value6, value7))
  dict = {key:value for key, value in zip(names, values_list)}
  return dict
hurricane_dict_name = hurricane_dict_name(names, names, months, years, max_sustained_winds, areas_affected, deaths, updated_damages)



# 3 Reorganize dictionary by year
def hurricane_dict_year(key, value1, value2, value3, value4, value5, value6, value7):
  values_list = (zip(value1, value2, value3, value4, value5, value6, value7))
  dict = {key:value for key, value in zip(names, values_list)}
  return dict
hurricane_dict2 = hurricane_dict_year(years, names, months, years, max_sustained_winds, areas_affected, deaths, updated_damages)



# 4 Counting Damaged Areas
#creating a list of distinct locations

#removing sublists, making one big giant list
def hurricane_freq(location):
  place_list = []
  area_count = []
  distinct_area = []
  distinct_area_list = []
  area_count_dict = {}
  for place in location:
    place_list += place
 #adding counts
  for area in place_list:
    area_count.append([area, place_list.count(area)])
#getting distinct area,count pairs
  for item in area_count:
    if item not in distinct_area:
      distinct_area.append(item)
  for item in distinct_area:
    distinct_area_list+= item
  for i in range(0, len(distinct_area_list), 2):
    area_count_dict[distinct_area_list[i]] = distinct_area_list[i+1]
  return area_count_dict
  return distinct_area

hurricane_freq_dict = hurricane_freq(areas_affected)





#5 find area with most hurricanes:
def most_hurricanes(frequency_dict):
  most_hurricanes = {}
  most_hurricanes[max(frequency_dict, key = frequency_dict.get)] = frequency_dict[max(frequency_dict, key = frequency_dict.get)]
  return most_hurricanes
most_hurricanes = most_hurricanes(hurricane_freq_dict)




#6 most deaths 
deaths_dict = {key:value for key, value in zip(names, deaths)}
def most_deaths (deaths_dict):
  most_deaths = {}
  most_deaths[max(deaths_dict, key = deaths_dict.get)] = deaths_dict[max(deaths_dict, key = deaths_dict.get)]
  return most_deaths
most_deaths_dict = most_deaths(deaths_dict)


#7 mortality scale
#idk why hurricane dictionary isn't working.. i am just going to try to get part of this problem solved by making a dictionary of mortality scales and hurricane names
def mortality_rating(deaths_dict):
  mortality_scale = {0: 0,
                  1: 100,
                  2: 500,
                  3: 1000,
                  4: 10000}


  mortality_rating = []
  for item in deaths_dict.values():
    if item == 0:
      mortality_rating.append(0)
    elif item < 100:
      mortality_rating.append(1)
    elif item < 500:
      mortality_rating.append(2)
    elif item < 1000:
      mortality_rating.append(3)
    else:
      mortality_rating.append(4)

  mortality_rating_dict = {key:value for key, value in zip(names, mortality_rating)}

  ones = []
  twos = []
  threes = []
  fours = []
  for key in mortality_rating_dict.keys():
    if mortality_rating_dict[key] == 1:
      ones.append(key)
    elif mortality_rating_dict[key] == 2:
      twos.append(key)
    elif mortality_rating_dict[key] == 3:
      threes.append(key)
    elif mortality_rating_dict[key] == 4:
      fours.append(key)

  mortality_rating_dict2 = {1: ones, 2: twos, 3: threes, 4: fours}
  return mortality_rating_dict2
mortality_rating = mortality_rating(deaths_dict)





#8- most damage

for i in range(0, len(updated_damages)):
  if updated_damages[i] == "Damages not recorded":
    updated_damages[i] = 0
damage_dict = {key:value for key, value in zip(names, updated_damages)}    

def most_damage(damage_dict):
  most_damage = {}
  most_damage[max(damage_dict, key = damage_dict.get)] = damage_dict[max(damage_dict, key = damage_dict.get)]
  return most_damage
most_damage = most_damage(damage_dict)

#9 creating a dictionary by damage rating
def damage_rating(hurricane, damage_dict):
  zero = []
  one = []
  two = []
  three = []
  four = []
  damage_rating = []

  for item in damage_dict.values():
    if item == 0:
      damage_rating.append(0)
    elif item < 100000000:
      damage_rating.append(1)
    elif item < 1000000000:
      damage_rating.append(2)
    elif item < 10000000000:
      damage_rating.append(3)
    else:
      damage_rating.append(4)


  damage_rating_dict = {key:value for key, value in zip(hurricane, damage_rating)}


  for key in damage_rating_dict.keys():
    if damage_rating_dict[key] == 0:
      zero.append(key)
    elif damage_rating_dict[key] == 1:
      one.append(key)
    elif damage_rating_dict[key] == 2:
      two.append(key)
    elif damage_rating_dict[key] == 3:
      three.append(key)
  
  damage_rating_dict2 = {0:zero, 1:one, 2:two, 3:three, 4:four}
  return damage_rating_dict2

damage_rating_dict = damage_rating(names, damage_dict)
