from helper_functions import choose_statistic, population_distribution, sampling_distribution
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy import stats
import seaborn as sns
import codecademylib3

# task 1: load in the spotify dataset
spotify_data = pd.read_csv('spotify_data.csv')

# task 2: preview the dataset
print(spotify_data.head())
print(spotify_data.describe())
print(spotify_data.dtypes)

# task 3: select the relevant column
song_tempos = spotify_data.tempo

# task 5: plot the population distribution with the mean labeled
def population_distribution(data):
  plt.hist(data, color='orange', label="Population Data")
  plt.legend()
  plt.title(f"Population Distribution \n Mean of Population Distribution = {round(np.mean(song_tempos),3)}")
  plt.show()
  plt.close()

population_distribution(song_tempos)
# task 6: sampling distribution of the sample mean
def choose_statistic(data, stat):
  if stat == 'Mean':
    return data.mean()
    print(data.mean())
  elif stat == 'Med':
    return data.median()
  elif stat == 'Mode':
    return data.mode()
  elif stat == 'Max':
    return data.max()
  elif stat == 'Min':
    return data.min()
  elif stat == "Var":
    return data.var()
  elif stat =='Std':
    return data.std()
  else: 
    print("This statistic is unsupported.")


def sampling_distribution(data, samp_size, stat):
  sample_stats = []
  for i in range(0,500):
    sample = np.random.choice(np.array(data), samp_size, replace = False)
    sample_statistic = choose_statistic(sample, stat)
    sample_stats.append(sample_statistic)
  plt.hist(sample_stats, color='green', label="Sample Data")
  plt.legend()
  plt.title(f"{stat} Distribution \n Mean of Sample Distribution = {round(np.mean(sample_stats), 3)}")
  plt.show()   
  plt.close()
sampling_distribution(song_tempos, 30, 'Mean')


# task 8: sampling distribution of the sample minimum
sampling_distribution(song_tempos, 30, 'Min')

# task 10: sampling distribution of the sample variance
sampling_distribution(song_tempos, 30, 'Var')

# task 13: calculate the population mean and standard deviation
population_mean = song_tempos.mean()
population_std = song_tempos.std()

# task 14: calculate the standard error
sample_size = 30
standard_error = population_std/(sample_size**2)
# task 15: calculate the probability of observing an average tempo of 140bpm or lower from a sample of 30 songs
prob_less_than_140 = stats.norm.cdf(140, population_mean, population_std) - stats.norm.pdf(140, population_mean, population_std)
print(prob_less_than_140)

# task 16: calculate the probability of observing an average tempo of 150bpm or higher from a sample of 30 songs
prob_greater_than_150 = 1- stats.norm.cdf(150, population_mean, population_std)
print(prob_greater_than_150)
